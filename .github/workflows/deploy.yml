name: Function deploy

on:
  workflow_dispatch:
    inputs:
      entrypoint:
        description: 'Function entry point (should be flask_entry_point)'
        required: true
        type: string
      environment:
        description: 'Target deployment environment'
        required: true
        type: choice
        options:
          - production
          - dev

env:
  PROJECT_ID: grapevine-v2-feb-2025
  REGION: europe-west1

jobs:
  deploy:
    permissions:
      id-token: write
      contents: read

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Authenticate Google Cloud
      uses: google-github-actions/auth@v2
      with:
        service_account: "github-service-account@grapevine-v2-feb-2025.iam.gserviceaccount.com"
        workload_identity_provider: "projects/73106334063/locations/global/workloadIdentityPools/github-gcp/providers/github-actions"

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Read Function Configuration
      run: |
        BASE_FUNCTION_NAME="sophie-chatbot-be"
        ENVIRONMENT=${{ github.event.inputs.environment }}
        FUNCTION_NAME="${BASE_FUNCTION_NAME}-${ENVIRONMENT}"

        # Determine the config file based on the input environment
        CONFIG_FILE="config.${{ github.event.inputs.environment }}.yaml"

        if [ ! -f "$CONFIG_FILE" ]; then
          echo "❌ Config file $CONFIG_FILE not found!"
          exit 1
        fi

        echo "📂 Loading configuration from $CONFIG_FILE..."

        # Extract values from YAML
        RUNTIME=$(yq '.runtime' $CONFIG_FILE)
        ENTRYPOINT=$(yq '.entrypoint' $CONFIG_FILE)
        MEMORY=$(yq '.memory' $CONFIG_FILE)
        TIMEOUT=$(yq '.timeout' $CONFIG_FILE)
        REGION=$(yq '.region' $CONFIG_FILE)

        # Extract environment variables (always required)
        ENV_VARS=$(yq '.env_vars | to_entries | map(.key + "=" + .value) | join(",")' $CONFIG_FILE)

        # Extract secrets (optional)
        if yq '.secrets' $CONFIG_FILE &> /dev/null; then
          SECRETS=$(yq '.secrets | to_entries | map(.key + "=" + .value) | join(",")' $CONFIG_FILE)
          echo "SECRETS=$SECRETS" >> $GITHUB_ENV
        else
          SECRETS=""
        fi

        # Extract extra arguments (optional)
        if yq '.extra_args' $CONFIG_FILE &> /dev/null; then
          EXTRA_ARGS=$(yq '.extra_args | join(" ")' $CONFIG_FILE)
          echo "EXTRA_ARGS=$EXTRA_ARGS" >> $GITHUB_ENV
        else
          EXTRA_ARGS=""
        fi

        # Save to environment variables
        echo "RUNTIME=$RUNTIME" >> $GITHUB_ENV
        echo "ENTRYPOINT=$ENTRYPOINT" >> $GITHUB_ENV
        echo "MEMORY=$MEMORY" >> $GITHUB_ENV
        echo "TIMEOUT=$TIMEOUT" >> $GITHUB_ENV
        echo "REGION=$REGION" >> $GITHUB_ENV
        echo "ENV_VARS=$ENV_VARS" >> $GITHUB_ENV

    - name: Deploy Cloud Function
      run: |
        BASE_FUNCTION_NAME="sophie-chatbot-be"
        ENVIRONMENT=${{ github.event.inputs.environment }}

        # Include the environment in the function name
        FUNCTION_NAME="${BASE_FUNCTION_NAME}-${ENVIRONMENT}"

        CMD="gcloud functions deploy $FUNCTION_NAME \
          --gen2 \
          --runtime \"$RUNTIME\" \
          --entry-point \"$ENTRYPOINT\" \
          --region \"$REGION\" \
          --service-account github-service-account@grapevine-v2-feb-2025.iam.gserviceaccount.com \
          --source \"${{ github.workspace }}\" \
          --timeout \"$TIMEOUT\" \
          --memory \"$MEMORY\" \
          --set-env-vars \"$ENV_VARS\""

        # Add secrets only if they exist
        if [ -n "$SECRETS" ]; then
          CMD="$CMD --set-secrets \"$SECRETS\""
        fi

        # Add extra args only if they exist
        if [ -n "$EXTRA_ARGS" ]; then
          CMD="$CMD $EXTRA_ARGS"
        fi

        echo "🚀 Deploying function: $FUNCTION_NAME"
        eval $CMD
